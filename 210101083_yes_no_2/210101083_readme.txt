
CS566 Speech Processing : Yes/No Detection
Name - Priyanshu Raj
Roll - 210101083
Outlook ID - r.priyanshu@iitg.ac.in


How to Run the Code:

1. Move to the last line of the main function, and press F9 key to mark it as the break point.
2. Press F7 key to build the solution and F5 key to start debugging the code.
3. The terminal will print "Recording ambient noise" for few seconds and then will print "Recording word data" for 3 seconds, during which you have to speak Yes/No.


Outputs generated by the Code:

1. On the Terminal - Average Energy, Average ZCR, and The Predicted Word.
2. ambient_noise.txt - Stores the captured ambient noise data.
3. word.txt - Stores the extracted word segment.
4. output_file.txt - Stores the energy and ZCR values for each frame of the word.


Overview:

This program processes audio data to detect and classify a word as either "Yes" or "No" based on its energy and Zero Crossing Rate (ZCR). The program records audio from the microphone, extracts the word segment from the ambient noise, processes the word into frames, calculates relevant features (energy and ZCR), and then makes a classification.


Function Descriptions:

1. main(int argc, char* argv[]) -

	The main function orchestrates the entire process by:
	(i) Capturing ambient noise.
	(ii) Extracting the word segment.
	(iii) Calculating normalization value and DC shift.
	(iv) Calculating energy and ZCR for the word.
	(v) Classifying the word as "Yes" or "No".

2. processAmbientNoise(const string& filename) -

	- Captures ambient noise from the input audio data.
	- Writes the captured noise to a file and determines the maximum noise level.
	- This noise level is used to distinguish the actual word from the background noise.

3. extractWordData(const string& filename) -

	- Extracts the word segment from the input audio data based on the detected noise level.
	- This function identifies the word's start and end points, ensuring that the word is of sufficient length and free from excessive noise.

4. calculateNormalizationValue(const string& filename) -

	- Finds the maximum absolute amplitude value from the word file.
	- This value is used to normalize the audio data for consistent processing.

5. calculateDCShift() - 

	- Calculates the DC shift of the audio data based on the ambient noise file.
	- This value is used to normalize the amplitude values before further processing.

6. calculateEnergyAndZCR(const string& filename) -

	- Processes the word segment by dividing it into frames.
	- For each frame, it calculates the energy and ZCR.
	- The results are written to an output file and are used for final classification.

7. classifyWord() -

	- Classifies the detected word based on the average energy and ZCR calculated over all frames.
	- If the average ZCR is less than a threshold (25 in this case), the word is classified as "No", otherwise "Yes".